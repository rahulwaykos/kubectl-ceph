#!/bin/bash

if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]
then
 
   echo "

Initialize Ceph RBD-Provisioner

***Must validate ceph configuration before using this command***

Check 'kubectl ceph validate -h' for details
   
Usage:

  kubectl ceph init -p [pool] -i [image] -s [size]

Options:

--defaults                Default values pool=rbd image=kube size=2048
-p | --pool=    pool      Ceph osd pool 
-i | --iamge=   image     Image to create in pool
-s | -size=     size      Size of image in pool 

        
Flags:
  -h, --help   help for kubectl ceph init  "
   exit 0
   
 fi
 
POSITIONAL=()

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -p|--pool=*)
    if [[ "$key" == "-p" ]]; then
    pool="$2"
    shift # past argument
    shift # past value
    else
    pool="${key#*=}"
    shift
    fi
    ;;
    -i|--image=*)
    if [[ "$key" == "-i" ]]; then
    image="$2"
    shift # past argument
    shift # past value
    else
    image="${key#*=}"
    shift
    fi
    ;;
     -s|--size=*)
    if [[ "$key" == "-s" ]]; then
    size="$2"
    shift # past argument
    shift # past value
    else
    image="${key#*=}"
    shift
    fi
    ;;
    --defaults)
    pool="rbd"
    image="kube"
    size="2048"
    shift
    ;;
esac
done
set -- "${POSITIONAL[@]}"

rbd_feature() {
rbd feature disable ${pool}/${image} deep-flatten
rbd feature disable ${pool}/${image} fast-diff
rbd feature disable ${pool}/${image} object-map
}

echo pool=$pool image=$image size=$size    $key       
if [[ "$key" == "defaults" ]]
then
rbd create ${image} --size ${size} -p ${pool} > /dev/null 2>&1
else
ceph osd pool create ${pool} 100  > /dev/null 2>&1
rbd create ${image} --size ${size} -p ${pool} > /dev/null 2>&1
fi

systemctl enable rbdmap > /dev/null 2>&1
if [[ "$?" == "0" ]] 
then
rbd_feature
rbd map ${image} -p ${pool}
else
rm /etc/ceph/rbdmap
rbd_feature
systemctl enable rbdmap > /dev/null 2>&1
rbd map ${image} -p ${pool}
fi



progress-bar() {
  local duration=${1}


    already_done() { for ((done=0; done<$elapsed; done++)); do printf "â–‡"; done }
    remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
    percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
    clean_line() { printf "\r"; }

  for (( elapsed=1; elapsed<=$duration; elapsed++ )); do
      already_done; remaining; percentage
      sleep 1
      clean_line
  done
  clean_line
} 



storage_class() {

mon1=$(awk '/mon/ {print $4,$5}' ceph.conf | tail -1 | awk -F ',' '{print $2}')
mon2=$(awk '/mon/ {print $4,$5}' ceph.conf | tail -1 | awk -F ',' '{print $1}')
key=$(ceph --cluster ceph auth get-key client.admin)
kubectl create secret generic ceph-secret \
    --type="kubernetes.io/rbd" \
    --from-literal=key=${key} \
    --namespace=kube-system


cat <<EOF | kubectl apply -f -
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: storage-rbd
provisioner: ceph.com/rbd
parameters:
  monitors: $mon1:6789, $mon2:6789
  adminId: admin
  adminSecretName: ceph-secret
  adminSecretNamespace: kube-system
  pool: ${pool}
  userId: admin
  userSecretName: ceph-secret
  userSecretNamespace: kube-system
  imageFormat: "2"
  imageFeatures: layering
  
EOF

}


init () {
file="/etc/ceph/ceph.conf"
file1="/etc/ceph/ceph.client.admin.keyring"

if [[ -f "$file" ]] && [[ -f "$file1" ]] 
then
   ceph -s > /dev/null 2>&1
     if [[ "$?" == "0" ]]
      then
         curl -s https://raw.githubusercontent.com/rahulwaykos/k8s-ceph/master/scripts/rbd-provisioner.sh | sh > /dev/null 2>&1
         kubectl get pods -l app=rbd-provisioner -n kube-system | grep Running > /dev/null
        if [[ "$?" != "0" ]] 
         then
            echo -e "\nInitializing... Waiting for Pod to create"
            progress-bar 35
            echo -e "\n"
            kubectl get pods -l app=rbd-provisioner -n kube-system 
            storage_class
            else
            storage_class
         fi
      else
          echo "Validation Failed!! Please check ceph.conf and keyring"
      fi
else
   echo "No Files found in /etc/ceph"
   exit 1
fi 
 
 }
 



init

